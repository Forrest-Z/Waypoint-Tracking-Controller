#!/usr/bin/env python
PACKAGE = "dynamic_parameters"    # CHANGE HERE if the package name is changed

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Change parameters as per the requirements
"""
The add function adds a parameter to the list of parameters. It takes a few different arguments:
	- name - a string which specifies the name under which this parameter should be stored
	- paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
	- level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are ORed together and the resulting value is passed to the callback.
	- description - string which describes the parameter
	- default - specifies the default value
	- min - specifies the min value (optional and does not apply to strings and bools)
	- max - specifies the max value (optional and does not apply to strings and bools)
"""
gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "PID", "Template"))
# CHANGE HERE if the package name is changed
# Node name
# config file name